<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource on T-Mobile Open Source</title>
    <link>/categories/opensource/</link>
    <description>Recent content in Opensource on T-Mobile Open Source</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 May 2020 05:59:21 -0400</lastBuildDate><atom:link href="/categories/opensource/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitoring Cloud Foundry at Scale with cf-smoke-tests suite</title>
      <link>/blog/posts/diwan-smoke-test-suite/</link>
      <pubDate>Thu, 28 May 2020 05:59:21 -0400</pubDate>
      
      <guid>/blog/posts/diwan-smoke-test-suite/</guid>
      <description>T-Mobile runs Pivotal Cloud Foundry platform at a very large scale (≈100K application instances!), with a wide range of applications from across the organization spanning finance, payments, retail, and customer care. Monitoring such a large-scale Cloud Foundry environment is super challenging, yet mission-critical, for running the business operations seamlessly. We need to not only monitor important platform KPIs, but also the most frequently exercised workflows involving critical platform components and services.</description>
    </item>
    
    <item>
      <title>The [Machine] Learning is Never Done</title>
      <link>/blog/posts/hanson-ml-retraining/</link>
      <pubDate>Thu, 14 May 2020 10:51:21 -0400</pubDate>
      
      <guid>/blog/posts/hanson-ml-retraining/</guid>
      <description>You’ve built a model that stakeholders love. Now, you need it to retrain every day… and that requires a whole new architecture.
In this article, Mark Eric Hanson outlines why automated ML model retraining is important, the use cases it solves for T-Mobile, and how to stitch the tech together to recreate a similar implementation of your own. Its a fascinating read, and a good behind-the-scenes look at how we approach problem-solving at T-Mobile.</description>
    </item>
    
    <item>
      <title>Factory and builder patterns in JavaScript using object mapping</title>
      <link>/blog/posts/js-design-patterns/</link>
      <pubDate>Wed, 01 Aug 2018 07:32:00 -0800</pubDate>
      
      <guid>/blog/posts/js-design-patterns/</guid>
      <description>Overview Every language has design patterns, which help us to organize our code in a way, where it’s easy to understand, maintain and test. JavaScript being one of the most commonly used dynamic languages, is also one of the most abused and misunderstood ;). In this post I want to share some examples of how code is written and how can it be improved to make it more flexible which is easy to maintain and follow.</description>
    </item>
    
    <item>
      <title>Introducing Vertx and SpringBoot Java Templates for OpenFaas</title>
      <link>/blog/posts/faas-template-for-java/</link>
      <pubDate>Sun, 11 Feb 2018 13:19:22 -0700</pubDate>
      
      <guid>/blog/posts/faas-template-for-java/</guid>
      <description>Introduction This post is more of an introductory post announcing release of SpringBoot and Vertx Java templates for OpenFaas. These templates allow you to develop your serverless function for the OpenFaas platform using SpringBoot or Vertx. In the Java ecosystem both SpringBoot and Vertx are very popular frameworks for developing microservices. With the release of these templates we are bringing the power of these frameworks into OpenFaas. You can find the templates in our github repository here.</description>
    </item>
    
  </channel>
</rss>

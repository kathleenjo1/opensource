<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on T-Mobile Open Source</title>
    <link>/tags/api/</link>
    <description>Recent content in API on T-Mobile Open Source</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2019 10:00:00 -0800</lastBuildDate><atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing qAPI: Translating database queries into API calls</title>
      <link>/blog/posts/introducing-qapi/</link>
      <pubDate>Thu, 07 Nov 2019 10:00:00 -0800</pubDate>
      
      <guid>/blog/posts/introducing-qapi/</guid>
      <description>Designing and implementing test flows typically involves validating data with one or multiple databases. Whether it may be a simple test script, test frameworks such as Selenium (R), or test applications such as Tosca (R), querying the database directly is often not a good approach (from security and maintainability standpoints), and sometimes, not even fully supported.
In order to remove the database connections from such tests, T-Mobile’s Test Platform Engineering team developed qAPI (which stands for query API).</description>
    </item>
    
    <item>
      <title>Introducing Apigee API Gateway for T-Mobile&#39;s Jazz Serverless Development Platform</title>
      <link>/blog/posts/introducing-apigee-for-jazz/</link>
      <pubDate>Tue, 18 Sep 2018 01:59:28 -0700</pubDate>
      
      <guid>/blog/posts/introducing-apigee-for-jazz/</guid>
      <description>We are thrilled to announce that serverless (aka FaaS) developers now have a choice to expose their serverless functions as RESTful APIs from within the Jazz serverless development platform at a click of a button. If you are not aware of T-Mobile&amp;rsquo;s Jazz Serverless Development Platform, you can check it out on Github.
With this integration, Jazz developers will have an option to choose between multiple API Gateway providers for their serverless functions - APIGEE &amp;amp; AWS API Gateway depending on their business needs &amp;amp; their enterprise compliance requirements.</description>
    </item>
    
  </channel>
</rss>

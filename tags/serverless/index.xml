<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serverless on T-Mobile Open Source</title>
    <link>/tags/serverless/</link>
    <description>Recent content in Serverless on T-Mobile Open Source</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jan 2019 10:00:00 -0700</lastBuildDate><atom:link href="/tags/serverless/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 Key FaaS Announcements at Re:Invent 2018</title>
      <link>/blog/posts/faas-reinvent-2018/</link>
      <pubDate>Tue, 22 Jan 2019 10:00:00 -0700</pubDate>
      
      <guid>/blog/posts/faas-reinvent-2018/</guid>
      <description>55000+ attendees with 100+ products and services announcements make AWS re:Invent 2018 one of the largest tech events. It was a big event for serverless in general where AWS Lambda continued to be the top trending service from the event.
 Here are 5 key releases/upgrades in the FaaS world along with my notes of when to use it and when not to:
1. Invoke Lambda from Application Load Balancer (ALB): You can now expose your Lambda Functions as an endpoint through ALB.</description>
    </item>
    
    <item>
      <title>Introducing Apigee API Gateway for T-Mobile&#39;s Jazz Serverless Development Platform</title>
      <link>/blog/posts/introducing-apigee-for-jazz/</link>
      <pubDate>Tue, 18 Sep 2018 01:59:28 -0700</pubDate>
      
      <guid>/blog/posts/introducing-apigee-for-jazz/</guid>
      <description>We are thrilled to announce that serverless (aka FaaS) developers now have a choice to expose their serverless functions as RESTful APIs from within the Jazz serverless development platform at a click of a button. If you are not aware of T-Mobile&amp;rsquo;s Jazz Serverless Development Platform, you can check it out on Github.
With this integration, Jazz developers will have an option to choose between multiple API Gateway providers for their serverless functions - APIGEE &amp;amp; AWS API Gateway depending on their business needs &amp;amp; their enterprise compliance requirements.</description>
    </item>
    
    <item>
      <title>Serverless Development Challenges</title>
      <link>/blog/posts/serverless-development-challenges/</link>
      <pubDate>Thu, 01 Mar 2018 12:12:55 -0800</pubDate>
      
      <guid>/blog/posts/serverless-development-challenges/</guid>
      <description>This article describes the challenges I faced and my observations while designing and developing the Jazz framework.
Jazz is an application development framework for developing and managing serverless (aka FaaS) services. Jazz itself is built on top of Jazz and currently supports the best known FaaS implementation from AWS, ‘AWS Lambda’. Jazz started as an internal initiative in T-Mobile and is now available on github as an open source project.</description>
    </item>
    
    <item>
      <title>Introducing Vertx and SpringBoot Java Templates for OpenFaas</title>
      <link>/blog/posts/faas-template-for-java/</link>
      <pubDate>Sun, 11 Feb 2018 13:19:22 -0700</pubDate>
      
      <guid>/blog/posts/faas-template-for-java/</guid>
      <description>Introduction This post is more of an introductory post announcing release of SpringBoot and Vertx Java templates for OpenFaas. These templates allow you to develop your serverless function for the OpenFaas platform using SpringBoot or Vertx. In the Java ecosystem both SpringBoot and Vertx are very popular frameworks for developing microservices. With the release of these templates we are bringing the power of these frameworks into OpenFaas. You can find the templates in our github repository here.</description>
    </item>
    
    <item>
      <title>Introducing Jazz: T-Mobile’s Serverless Development Platform</title>
      <link>/blog/posts/introducing-jazz/</link>
      <pubDate>Fri, 13 Oct 2017 01:59:28 -0700</pubDate>
      
      <guid>/blog/posts/introducing-jazz/</guid>
      <description>Ship production code with confidence to FaaS platforms &amp;amp; more!
 Serverless is fascinating! No server setup, no failover management, no scaling issues, no infrastructure operations — Just the code! We’ll not get into the definitions, benefits, serverless trends etc — lots of great speakers, authors and writers have shared their excitement around serverless and a simple google search can answer most of the basic questions around serverless. Instead, we’ll focus on the serverless story in our organization, observations, learnings &amp;amp; the work we have been doing in this space.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on T-Mobile Open Source</title>
    <link>/tags/tools/</link>
    <description>Recent content in tools on T-Mobile Open Source</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2019 09:00:00 -0700</lastBuildDate><atom:link href="/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Piece of Cake, Percy Cake</title>
      <link>/blog/posts/percy-cake/</link>
      <pubDate>Thu, 03 Oct 2019 09:00:00 -0700</pubDate>
      
      <guid>/blog/posts/percy-cake/</guid>
      <description>Percy Percy is a configuration as code editor, it is not a configuration distribution system like Spring Cloud Configuration Server.
Percy facilitates editing configuration files in a terse (de-hydrated) format that is intended to simplify maintenance of external configuration files of an app or service across multiple deployed environments. The Percy project includes a set of validation and hydration scripts that will expand the de-hydrated ( DRY) configuration files into a set of JSON files, one for every deployment environment.</description>
    </item>
    
    <item>
      <title>Serverless Development Challenges</title>
      <link>/blog/posts/serverless-development-challenges/</link>
      <pubDate>Thu, 01 Mar 2018 12:12:55 -0800</pubDate>
      
      <guid>/blog/posts/serverless-development-challenges/</guid>
      <description>This article describes the challenges I faced and my observations while designing and developing the Jazz framework.
Jazz is an application development framework for developing and managing serverless (aka FaaS) services. Jazz itself is built on top of Jazz and currently supports the best known FaaS implementation from AWS, ‘AWS Lambda’. Jazz started as an internal initiative in T-Mobile and is now available on github as an open source project.</description>
    </item>
    
    <item>
      <title>Introducing Jazz: T-Mobile’s Serverless Development Platform</title>
      <link>/blog/posts/introducing-jazz/</link>
      <pubDate>Fri, 13 Oct 2017 01:59:28 -0700</pubDate>
      
      <guid>/blog/posts/introducing-jazz/</guid>
      <description>Ship production code with confidence to FaaS platforms &amp;amp; more!
 Serverless is fascinating! No server setup, no failover management, no scaling issues, no infrastructure operations — Just the code! We’ll not get into the definitions, benefits, serverless trends etc — lots of great speakers, authors and writers have shared their excitement around serverless and a simple google search can answer most of the basic questions around serverless. Instead, we’ll focus on the serverless story in our organization, observations, learnings &amp;amp; the work we have been doing in this space.</description>
    </item>
    
    <item>
      <title>Open source tools leveraged in this site</title>
      <link>/blog/posts/oss-site-tools/</link>
      <pubDate>Thu, 05 Oct 2017 09:00:00 -0700</pubDate>
      
      <guid>/blog/posts/oss-site-tools/</guid>
      <description>Overview In this post I wanted to walkthrough how the T-Mobile opensource site is setup and cover the tools and content publishing process we are leveraging. If you are looking to begin your journey towards opensource hopefully this information will be useful.
Our Requirements When we first started talking with Steve and Tim about launching our opensource site to show case lot of the great work our teams are doing, both Steve and Tim wanted to make sure we leveraged opensource tools and not rely on any internal tools or processes.</description>
    </item>
    
  </channel>
</rss>
